// Code generated by protoc-gen-go.
// source: pbft.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	pbft.proto

It has these top-level messages:
	RequestMsg
	RingSign
	ReplyMsg
	PrePrepareMsg
	VoteMsg
	ViewChangeMsg
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	"context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type RequestMsg struct {
	Timestamp  int64  `protobuf:"varint,1,opt,name=Timestamp" json:"Timestamp,omitempty"`
	ClientID   string `protobuf:"bytes,2,opt,name=ClientID" json:"ClientID,omitempty"`
	Operation  string `protobuf:"bytes,3,opt,name=Operation" json:"Operation,omitempty"`
	SequenceID int64  `protobuf:"varint,4,opt,name=SequenceID" json:"SequenceID,omitempty"`
}

func (m *RequestMsg) Reset()                    { *m = RequestMsg{} }
func (m *RequestMsg) String() string            { return proto1.CompactTextString(m) }
func (*RequestMsg) ProtoMessage()               {}
func (*RequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RingSign struct {
	C0     string   `protobuf:"bytes,1,opt,name=C0" json:"C0,omitempty"`
	R      []string `protobuf:"bytes,2,rep,name=R" json:"R,omitempty"`
	YDashX string   `protobuf:"bytes,3,opt,name=YDashX" json:"YDashX,omitempty"`
	YDashY string   `protobuf:"bytes,4,opt,name=YDashY" json:"YDashY,omitempty"`
	Value  string   `protobuf:"bytes,5,opt,name=value" json:"value,omitempty"`
	PubId  []string `protobuf:"bytes,6,rep,name=PubId" json:"PubId,omitempty"`
}

func (m *RingSign) Reset()                    { *m = RingSign{} }
func (m *RingSign) String() string            { return proto1.CompactTextString(m) }
func (*RingSign) ProtoMessage()               {}
func (*RingSign) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ReplyMsg struct {
	ViewID    int64  `protobuf:"varint,1,opt,name=ViewID" json:"ViewID,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=Timestamp" json:"Timestamp,omitempty"`
	ClientID  string `protobuf:"bytes,3,opt,name=ClientID" json:"ClientID,omitempty"`
	NodeID    string `protobuf:"bytes,4,opt,name=NodeID" json:"NodeID,omitempty"`
	Result    string `protobuf:"bytes,5,opt,name=Result" json:"Result,omitempty"`
}

func (m *ReplyMsg) Reset()                    { *m = ReplyMsg{} }
func (m *ReplyMsg) String() string            { return proto1.CompactTextString(m) }
func (*ReplyMsg) ProtoMessage()               {}
func (*ReplyMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type PrePrepareMsg struct {
	ViewID     int64       `protobuf:"varint,1,opt,name=ViewID" json:"ViewID,omitempty"`
	SequenceID int64       `protobuf:"varint,2,opt,name=SequenceID" json:"SequenceID,omitempty"`
	Digest     string      `protobuf:"bytes,3,opt,name=Digest" json:"Digest,omitempty"`
	RequestMsg *RequestMsg `protobuf:"bytes,4,opt,name=RequestMsg" json:"RequestMsg,omitempty"`
}

func (m *PrePrepareMsg) Reset()                    { *m = PrePrepareMsg{} }
func (m *PrePrepareMsg) String() string            { return proto1.CompactTextString(m) }
func (*PrePrepareMsg) ProtoMessage()               {}
func (*PrePrepareMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PrePrepareMsg) GetRequestMsg() *RequestMsg {
	if m != nil {
		return m.RequestMsg
	}
	return nil
}

type VoteMsg struct {
	ViewID     int64     `protobuf:"varint,1,opt,name=ViewID" json:"ViewID,omitempty"`
	SequenceID int64     `protobuf:"varint,2,opt,name=SequenceID" json:"SequenceID,omitempty"`
	Digest     string    `protobuf:"bytes,3,opt,name=Digest" json:"Digest,omitempty"`
	NodeID     string    `protobuf:"bytes,4,opt,name=NodeID" json:"NodeID,omitempty"`
	MsgType    int64     `protobuf:"varint,5,opt,name=msgType" json:"msgType,omitempty"`
	RS         *RingSign `protobuf:"bytes,6,opt,name=RS" json:"RS,omitempty"`
}

func (m *VoteMsg) Reset()                    { *m = VoteMsg{} }
func (m *VoteMsg) String() string            { return proto1.CompactTextString(m) }
func (*VoteMsg) ProtoMessage()               {}
func (*VoteMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *VoteMsg) GetRS() *RingSign {
	if m != nil {
		return m.RS
	}
	return nil
}

type ViewChangeMsg struct {
	ViewID      int64  `protobuf:"varint,1,opt,name=ViewID" json:"ViewID,omitempty"`
	NodeID      string `protobuf:"bytes,2,opt,name=NodeID" json:"NodeID,omitempty"`
	PrimaryNode string `protobuf:"bytes,3,opt,name=PrimaryNode" json:"PrimaryNode,omitempty"`
	Digest      string `protobuf:"bytes,4,opt,name=Digest" json:"Digest,omitempty"`
	MsgType     int64  `protobuf:"varint,5,opt,name=msgType" json:"msgType,omitempty"`
}

func (m *ViewChangeMsg) Reset()                    { *m = ViewChangeMsg{} }
func (m *ViewChangeMsg) String() string            { return proto1.CompactTextString(m) }
func (*ViewChangeMsg) ProtoMessage()               {}
func (*ViewChangeMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto1.RegisterType((*RequestMsg)(nil), "proto.RequestMsg")
	proto1.RegisterType((*RingSign)(nil), "proto.RingSign")
	proto1.RegisterType((*ReplyMsg)(nil), "proto.ReplyMsg")
	proto1.RegisterType((*PrePrepareMsg)(nil), "proto.PrePrepareMsg")
	proto1.RegisterType((*VoteMsg)(nil), "proto.VoteMsg")
	proto1.RegisterType((*ViewChangeMsg)(nil), "proto.ViewChangeMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for BroadCast service

type BroadCastClient interface {
	GetReqResponse(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (*PrePrepareMsg, error)
	GetPrePrepareResponse(ctx context.Context, in *PrePrepareMsg, opts ...grpc.CallOption) (*VoteMsg, error)
	GetPrepareResponse(ctx context.Context, in *VoteMsg, opts ...grpc.CallOption) (*VoteMsg, error)
	GetCommitResponse(ctx context.Context, in *VoteMsg, opts ...grpc.CallOption) (*ReplyMsg, error)
	GetViewChangeResponse(ctx context.Context, in *ViewChangeMsg, opts ...grpc.CallOption) (*ViewChangeMsg, error)
}

type broadCastClient struct {
	cc *grpc.ClientConn
}

func NewBroadCastClient(cc *grpc.ClientConn) BroadCastClient {
	return &broadCastClient{cc}
}

func (c *broadCastClient) GetReqResponse(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (*PrePrepareMsg, error) {
	out := new(PrePrepareMsg)
	err := grpc.Invoke(ctx, "/proto.BroadCast/GetReqResponse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadCastClient) GetPrePrepareResponse(ctx context.Context, in *PrePrepareMsg, opts ...grpc.CallOption) (*VoteMsg, error) {
	out := new(VoteMsg)
	err := grpc.Invoke(ctx, "/proto.BroadCast/GetPrePrepareResponse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadCastClient) GetPrepareResponse(ctx context.Context, in *VoteMsg, opts ...grpc.CallOption) (*VoteMsg, error) {
	out := new(VoteMsg)
	err := grpc.Invoke(ctx, "/proto.BroadCast/GetPrepareResponse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadCastClient) GetCommitResponse(ctx context.Context, in *VoteMsg, opts ...grpc.CallOption) (*ReplyMsg, error) {
	out := new(ReplyMsg)
	err := grpc.Invoke(ctx, "/proto.BroadCast/GetCommitResponse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadCastClient) GetViewChangeResponse(ctx context.Context, in *ViewChangeMsg, opts ...grpc.CallOption) (*ViewChangeMsg, error) {
	out := new(ViewChangeMsg)
	err := grpc.Invoke(ctx, "/proto.BroadCast/GetViewChangeResponse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BroadCast service

type BroadCastServer interface {
	GetReqResponse(context.Context, *RequestMsg) (*PrePrepareMsg, error)
	GetPrePrepareResponse(context.Context, *PrePrepareMsg) (*VoteMsg, error)
	GetPrepareResponse(context.Context, *VoteMsg) (*VoteMsg, error)
	GetCommitResponse(context.Context, *VoteMsg) (*ReplyMsg, error)
	GetViewChangeResponse(context.Context, *ViewChangeMsg) (*ViewChangeMsg, error)
}

func RegisterBroadCastServer(s *grpc.Server, srv BroadCastServer) {
	s.RegisterService(&_BroadCast_serviceDesc, srv)
}

func _BroadCast_GetReqResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadCastServer).GetReqResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BroadCast/GetReqResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadCastServer).GetReqResponse(ctx, req.(*RequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadCast_GetPrePrepareResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrePrepareMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadCastServer).GetPrePrepareResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BroadCast/GetPrePrepareResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadCastServer).GetPrePrepareResponse(ctx, req.(*PrePrepareMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadCast_GetPrepareResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadCastServer).GetPrepareResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BroadCast/GetPrepareResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadCastServer).GetPrepareResponse(ctx, req.(*VoteMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadCast_GetCommitResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadCastServer).GetCommitResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BroadCast/GetCommitResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadCastServer).GetCommitResponse(ctx, req.(*VoteMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadCast_GetViewChangeResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewChangeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadCastServer).GetViewChangeResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BroadCast/GetViewChangeResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadCastServer).GetViewChangeResponse(ctx, req.(*ViewChangeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _BroadCast_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BroadCast",
	HandlerType: (*BroadCastServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReqResponse",
			Handler:    _BroadCast_GetReqResponse_Handler,
		},
		{
			MethodName: "GetPrePrepareResponse",
			Handler:    _BroadCast_GetPrePrepareResponse_Handler,
		},
		{
			MethodName: "GetPrepareResponse",
			Handler:    _BroadCast_GetPrepareResponse_Handler,
		},
		{
			MethodName: "GetCommitResponse",
			Handler:    _BroadCast_GetCommitResponse_Handler,
		},
		{
			MethodName: "GetViewChangeResponse",
			Handler:    _BroadCast_GetViewChangeResponse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto1.RegisterFile("pbft.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 541 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0x9d, 0xd6, 0xad, 0xa7, 0x34, 0x55, 0x57, 0x25, 0xb2, 0x02, 0x82, 0xc8, 0xa7, 0x9c,
	0xa2, 0x50, 0x24, 0x2e, 0x1c, 0x90, 0xe2, 0xa0, 0x28, 0x07, 0xc0, 0xda, 0x54, 0x15, 0x39, 0x3a,
	0xcd, 0xe0, 0xae, 0x14, 0x7f, 0xd4, 0xbb, 0x06, 0x72, 0xe7, 0xc8, 0x09, 0xfe, 0x06, 0x3f, 0x82,
	0x9f, 0x86, 0x76, 0xbd, 0x89, 0xed, 0x34, 0xc9, 0x8d, 0x93, 0xf7, 0xbd, 0xdd, 0x99, 0x79, 0xfb,
	0xde, 0x1a, 0x20, 0x9d, 0x7f, 0x11, 0xfd, 0x34, 0x4b, 0x44, 0x42, 0x8e, 0xd5, 0xc7, 0xfd, 0x61,
	0x00, 0x50, 0x7c, 0xc8, 0x91, 0x8b, 0x0f, 0x3c, 0x24, 0xcf, 0xc1, 0xbe, 0x61, 0x11, 0x72, 0x11,
	0x44, 0xa9, 0x63, 0x74, 0x8d, 0x5e, 0x93, 0x96, 0x04, 0xe9, 0xc0, 0xa9, 0xb7, 0x64, 0x18, 0x8b,
	0xc9, 0xc8, 0x31, 0xbb, 0x46, 0xcf, 0xa6, 0x1b, 0x2c, 0x2b, 0x3f, 0xa5, 0x98, 0x05, 0x82, 0x25,
	0xb1, 0xd3, 0x54, 0x9b, 0x25, 0x41, 0x5e, 0x00, 0x4c, 0xe5, 0x94, 0xf8, 0x0e, 0x27, 0x23, 0xe7,
	0x48, 0x35, 0xae, 0x30, 0x52, 0xc6, 0x29, 0x65, 0x71, 0x38, 0x65, 0x61, 0x4c, 0x5a, 0x60, 0x7a,
	0x03, 0x35, 0xdd, 0xa6, 0xa6, 0x37, 0x20, 0x4f, 0xc0, 0xa0, 0x8e, 0xd9, 0x6d, 0xf6, 0x6c, 0x6a,
	0x50, 0xd2, 0x06, 0x6b, 0x36, 0x0a, 0xf8, 0xfd, 0x67, 0x3d, 0x45, 0xa3, 0x0d, 0x3f, 0x53, 0xed,
	0xd7, 0xfc, 0x8c, 0x5c, 0xc1, 0xf1, 0xd7, 0x60, 0x99, 0xa3, 0x73, 0xac, 0xe8, 0x02, 0x48, 0xd6,
	0xcf, 0xe7, 0x93, 0x85, 0x63, 0xa9, 0xbe, 0x05, 0x70, 0x7f, 0x4a, 0x19, 0x98, 0x2e, 0x57, 0xd2,
	0x8b, 0x36, 0x58, 0xb7, 0x0c, 0xbf, 0x4d, 0x46, 0xda, 0x08, 0x8d, 0xea, 0x1e, 0x99, 0x87, 0x3c,
	0x6a, 0x6e, 0x79, 0xd4, 0x06, 0xeb, 0x63, 0xb2, 0x58, 0x3b, 0x60, 0x53, 0x8d, 0x24, 0x4f, 0x91,
	0xe7, 0x4b, 0xa1, 0x35, 0x6a, 0xe4, 0xfe, 0x32, 0xe0, 0xdc, 0xcf, 0xd0, 0xcf, 0x30, 0x0d, 0x32,
	0x3c, 0xa4, 0xa9, 0xee, 0xaf, 0xb9, 0xed, 0xaf, 0xac, 0x1b, 0xb1, 0x10, 0xb9, 0x58, 0x9b, 0x56,
	0x20, 0xf2, 0xaa, 0x9a, 0xbe, 0x52, 0x75, 0x76, 0x7d, 0x59, 0xbc, 0x90, 0x7e, 0xb9, 0x41, 0x2b,
	0x87, 0xdc, 0x3f, 0x06, 0x9c, 0xdc, 0x26, 0xe2, 0xbf, 0xc8, 0xd9, 0x67, 0x90, 0x03, 0x27, 0x11,
	0x0f, 0x6f, 0x56, 0x69, 0x91, 0x62, 0x93, 0xae, 0x21, 0x79, 0x09, 0x26, 0x9d, 0x3a, 0x96, 0x12,
	0x7e, 0xb1, 0x16, 0xae, 0x1f, 0x12, 0x35, 0xe9, 0xd4, 0xfd, 0x6d, 0xc0, 0xb9, 0x54, 0xe5, 0xdd,
	0x07, 0x71, 0x78, 0x50, 0x74, 0x39, 0xdc, 0xac, 0x0d, 0xef, 0xc2, 0x99, 0x9f, 0xb1, 0x28, 0xc8,
	0x56, 0x92, 0xd0, 0x8a, 0xab, 0x54, 0xe5, 0x3a, 0x47, 0xb5, 0xeb, 0xec, 0x95, 0x7d, 0xfd, 0xd7,
	0x04, 0x7b, 0x98, 0x25, 0xc1, 0xc2, 0x0b, 0xb8, 0x20, 0x6f, 0xa1, 0x35, 0x46, 0x41, 0xf1, 0x81,
	0x22, 0x4f, 0x93, 0x98, 0x23, 0x79, 0x9c, 0x41, 0xe7, 0x4a, 0x53, 0xb5, 0x07, 0xe1, 0x36, 0xc8,
	0x3b, 0x78, 0x3a, 0x46, 0x51, 0xb2, 0x9b, 0x1e, 0x3b, 0x0b, 0x3a, 0x2d, 0xcd, 0xea, 0x08, 0xdd,
	0x06, 0x79, 0x03, 0xa4, 0x68, 0x50, 0xab, 0xde, 0x3a, 0xb7, 0xb3, 0xee, 0x72, 0x8c, 0xc2, 0x4b,
	0xa2, 0x88, 0x89, 0xbd, 0x65, 0x9b, 0x4c, 0xf4, 0x5f, 0xe5, 0x36, 0xc8, 0x7b, 0x25, 0xb8, 0xcc,
	0xe4, 0x91, 0xe0, 0x5a, 0x5c, 0x9d, 0x9d, 0xac, 0xdb, 0x18, 0x0e, 0xe0, 0x19, 0x4b, 0xfa, 0x61,
	0x96, 0xde, 0xf5, 0xf1, 0x7b, 0x10, 0xa5, 0x4b, 0xe4, 0xfd, 0x2c, 0xc9, 0x05, 0x86, 0x39, 0x5b,
	0xe0, 0xf0, 0x82, 0xca, 0xf5, 0x58, 0xae, 0x7d, 0x59, 0xef, 0x1b, 0x73, 0x4b, 0x35, 0x7a, 0xfd,
	0x2f, 0x00, 0x00, 0xff, 0xff, 0x05, 0x62, 0xd1, 0xc5, 0x07, 0x05, 0x00, 0x00,
}
